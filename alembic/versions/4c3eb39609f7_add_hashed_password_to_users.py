"""Add hashed_password to users

Revision ID: 4c3eb39609f7
Revises: 
Create Date: 2025-05-26 18:41:54.867303

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from sqlalchemy.dialects.postgresql import UUID

# revision identifiers, used by Alembic.
revision: str = '4c3eb39609f7'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('ai_models',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('provider', sa.String(), nullable=False),
    sa.Column('model_id', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('max_tokens', sa.Integer(), nullable=True),
    sa.Column('temperature', sa.Float(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_index(op.f('ix_ai_models_id'), 'ai_models', ['id'], unique=False)
    op.create_table('ai_preferences',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', UUID(as_uuid=True), sa.ForeignKey('users.id'), nullable=False),
    sa.Column('preferred_model_id', sa.Integer(), nullable=True),
    sa.Column('system_prompt', sa.Text(), nullable=True),
    sa.Column('temperature', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['preferred_model_id'], ['ai_models.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id')
    )
    op.create_index(op.f('ix_ai_preferences_id'), 'ai_preferences', ['id'], unique=False)
    op.create_table('conversations',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', UUID(as_uuid=True), sa.ForeignKey('users.id'), nullable=False),
    sa.Column('title', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_conversations_id'), 'conversations', ['id'], unique=False)
    op.create_table('messages',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('conversation_id', sa.Integer(), nullable=False),
    sa.Column('role', sa.String(), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['conversation_id'], ['conversations.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_messages_id'), 'messages', ['id'], unique=False)
    op.drop_table('transaction_tags')
    op.drop_table('financial_goals')
    op.drop_table('tags')
    op.drop_table('ai_insights')
    op.drop_table('ai_conversations')
    op.drop_table('expenses')
    op.drop_table('accounts')
    op.drop_table('transactions')
    op.drop_table('ai_messages')
    op.drop_table('categories')
    op.add_column('users', sa.Column('hashed_password', sa.String(), nullable=False))
    op.add_column('users', sa.Column('is_active', sa.Boolean(), nullable=True))
    op.add_column('users', sa.Column('is_superuser', sa.Boolean(), nullable=True))
    op.alter_column('users', 'id',
               existing_type=sa.UUID(),
               type_=sa.Integer(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text('uuid_generate_v4()'))
    op.alter_column('users', 'email',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_constraint('users_email_key', 'users', type_='unique')
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.drop_column('users', 'primary_financial_goal')
    op.drop_column('users', 'financial_goal_timeline')
    op.drop_column('users', 'employment_status')
    op.drop_column('users', 'ollama_host')
    op.drop_column('users', 'currency')
    op.drop_column('users', 'openai_api_key')
    op.drop_column('users', 'first_name')
    op.drop_column('users', 'monthly_expenses')
    op.drop_column('users', 'preferred_categorization_model')
    op.drop_column('users', 'date_of_birth')
    op.drop_column('users', 'bio')
    op.drop_column('users', 'ollama_model')
    op.drop_column('users', 'language')
    op.drop_column('users', 'last_name')
    op.drop_column('users', 'anthropic_api_key')
    op.drop_column('users', 'risk_tolerance')
    op.drop_column('users', 'timezone')
    op.drop_column('users', 'is_onboarding_done')
    op.drop_column('users', 'monthly_income')
    op.drop_column('users', 'preferred_ai_advisor')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('preferred_ai_advisor', sa.TEXT(), server_default=sa.text("'gpt4'::text"), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('monthly_income', sa.NUMERIC(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('is_onboarding_done', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('timezone', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('risk_tolerance', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('anthropic_api_key', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('last_name', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('language', postgresql.ENUM('en', 'es', 'fr', 'de', 'ja', 'hi', name='Languages'), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('ollama_model', sa.TEXT(), server_default=sa.text("'llama3'::text"), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('bio', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('date_of_birth', sa.DATE(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('preferred_categorization_model', sa.TEXT(), server_default=sa.text("'gpt35'::text"), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('monthly_expenses', sa.NUMERIC(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('first_name', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('openai_api_key', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('currency', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('ollama_host', sa.TEXT(), server_default=sa.text("'http://localhost:11434'::text"), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('employment_status', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('financial_goal_timeline', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('primary_financial_goal', sa.TEXT(), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.create_unique_constraint('users_email_key', 'users', ['email'], postgresql_nulls_not_distinct=False)
    op.alter_column('users', 'updated_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('users', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('users', 'email',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('users', 'id',
               existing_type=sa.Integer(),
               type_=sa.UUID(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text('uuid_generate_v4()'))
    op.drop_column('users', 'is_superuser')
    op.drop_column('users', 'is_active')
    op.drop_column('users', 'hashed_password')
    op.create_table('categories',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('color', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('icon', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='categories_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('ai_messages',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('conversation_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('sender', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['conversation_id'], ['ai_conversations.id'], name='ai_messages_conversation_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='ai_messages_pkey')
    )
    op.create_table('transactions',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('account_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('category_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('amount', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=False),
    sa.Column('date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('is_recurring', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['account_id'], ['accounts.id'], name='transactions_account_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['category_id'], ['categories.id'], name='transactions_category_id_fkey', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['auth.users.id'], name='transactions_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='transactions_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('accounts',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('type', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('balance', sa.NUMERIC(precision=12, scale=2), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('currency', sa.TEXT(), server_default=sa.text("'USD'::text"), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['auth.users.id'], name='accounts_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='accounts_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('expenses',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('category_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('amount', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=False),
    sa.Column('date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('is_recurring', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('recurrence_period', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['category_id'], ['categories.id'], name='expenses_category_id_fkey', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['auth.users.id'], name='expenses_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='expenses_pkey')
    )
    op.create_table('ai_conversations',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('conversation_type', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('title', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='ai_conversations_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='ai_conversations_pkey')
    )
    op.create_table('ai_insights',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('title', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('category', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('is_read', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='ai_insights_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='ai_insights_pkey')
    )
    op.create_table('tags',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['auth.users.id'], name='tags_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='tags_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('financial_goals',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('target', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=False),
    sa.Column('current', sa.NUMERIC(precision=12, scale=2), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('color', sa.TEXT(), server_default=sa.text("'bg-primary'::text"), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text("timezone('utc'::text, now())"), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text("timezone('utc'::text, now())"), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['auth.users.id'], name='financial_goals_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='financial_goals_pkey')
    )
    op.create_table('transaction_tags',
    sa.Column('transaction_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('tag_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['tag_id'], ['tags.id'], name='transaction_tags_tag_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['transaction_id'], ['transactions.id'], name='transaction_tags_transaction_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('transaction_id', 'tag_id', name='transaction_tags_pkey')
    )
    op.drop_index(op.f('ix_messages_id'), table_name='messages')
    op.drop_table('messages')
    op.drop_index(op.f('ix_conversations_id'), table_name='conversations')
    op.drop_table('conversations')
    op.drop_index(op.f('ix_ai_preferences_id'), table_name='ai_preferences')
    op.drop_table('ai_preferences')
    op.drop_index(op.f('ix_ai_models_id'), table_name='ai_models')
    op.drop_table('ai_models')
    # ### end Alembic commands ###
